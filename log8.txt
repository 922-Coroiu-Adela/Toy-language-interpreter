{
ID: 1
Execution Stack:
(Ref(int) v1; (int cnt; (new(v1, 2);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))))

Heap:

Symbol Table:

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
Ref(int) v1
(int cnt; (new(v1, 2);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
Ref(int) v1
(int cnt; (new(v1, 2);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(int cnt; (new(v1, 2);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(int cnt; (new(v1, 2);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
int cnt
(new(v1, 2);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
int cnt
(new(v1, 2);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(new(v1, 2);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(new(v1, 2);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
new(v1, 2);
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
new(v1, 2);
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:
1 -> 2

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:
1 -> 2

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
createSemaphore(cnt, readHeap(v1))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 2

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
createSemaphore(cnt, readHeap(v1))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 2

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 2
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 2
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))))
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 2
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))))
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 2
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 1
Execution Stack:
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 2
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 3
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 1
Execution Stack:
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 2
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 3
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 2
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 2
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 2

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2]

}

{
ID: 1
Execution Stack:
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 2
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 1
Execution Stack:
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 2
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 1
Execution Stack:
print(readHeap(v1)-1)
release(cnt)

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 2
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 1
Execution Stack:
print(readHeap(v1)-1)
release(cnt)

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 2
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 1
Execution Stack:
release(cnt)

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 2
Execution Stack:
release(cnt)

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 1
Execution Stack:
release(cnt)

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 2
Execution Stack:
release(cnt)

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[2, 1]

}

{
ID: 1
Execution Stack:

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 2
Execution Stack:

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 20

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*2);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*2);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 400

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 400

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 400

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 400

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
release(cnt)

Heap:
1 -> 400

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20
400

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:
release(cnt)

Heap:
1 -> 400

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20
400

FileTable:

CountSemaphoreTable:
1->2=[3]

}

{
ID: 3
Execution Stack:

Heap:
1 -> 400

Symbol Table:
cnt->1
v1->(1, int)

Output:
19
20
400

FileTable:

CountSemaphoreTable:
1->2=[]

}

{
ID: 1
Execution Stack:
(Ref(int) v1; (int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))))

Heap:

Symbol Table:

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
Ref(int) v1
(int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
Ref(int) v1
(int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
int cnt
(new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
int cnt
(new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
new(v1, 1);
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
new(v1, 1);
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:
1 -> 1

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:
1 -> 1

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
createSemaphore(cnt, readHeap(v1))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
createSemaphore(cnt, readHeap(v1))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))))
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))))
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
print(readHeap(v1)-1)
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
print(readHeap(v1)-1)
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 100

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 100

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*2);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 100

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*2);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 100

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
release(cnt)

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9
200

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
release(cnt)

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9
200

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9
200

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(Ref(int) v1; (int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))))

Heap:

Symbol Table:

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
Ref(int) v1
(int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
Ref(int) v1
(int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(int cnt; (new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
int cnt
(new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
int cnt
(new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(new(v1, 1);; (createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
new(v1, 1);
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
new(v1, 1);
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:

Symbol Table:
cnt->0
v1->(0, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:
1 -> 1

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(createSemaphore(cnt, readHeap(v1)); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))))

Heap:
1 -> 1

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
createSemaphore(cnt, readHeap(v1))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
createSemaphore(cnt, readHeap(v1))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->0
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))); (fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))))
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))); (acquire(cnt); (print(readHeap(v1)-1); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))))
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
fork((acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))))
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
(acquire(cnt); (print(readHeap(v1)-1); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
(acquire(cnt); (writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 1

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 2
Execution Stack:
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[2]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 2
Execution Stack:

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
acquire(cnt)
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[]

}

{
ID: 1
Execution Stack:
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
(print(readHeap(v1)-1); release(cnt))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
print(readHeap(v1)-1)
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
print(readHeap(v1)-1)
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:
release(cnt)

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 3
Execution Stack:
acquire(cnt)
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[1]

}

{
ID: 1
Execution Stack:

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*10);; (writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt))))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*10);
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 10

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 100

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(writeHeap(v1, readHeap(v1)*2);; (print(readHeap(v1)); release(cnt)))

Heap:
1 -> 100

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*2);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 100

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
writeHeap(v1, readHeap(v1)*2);
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 100

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
(print(readHeap(v1)); release(cnt))

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
print(readHeap(v1))
release(cnt)

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
release(cnt)

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9
200

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:
release(cnt)

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9
200

FileTable:

CountSemaphoreTable:
1->1=[3]

}

{
ID: 3
Execution Stack:

Heap:
1 -> 200

Symbol Table:
cnt->1
v1->(1, int)

Output:
10
9
200

FileTable:

CountSemaphoreTable:
1->1=[]

}

